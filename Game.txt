10 ;******************************************************************************************
20 ;SAVE #D2:GAME.M65
30       .OPT NO LIST
40 ;This code is based off the work of Mission:Ed Possible's YouTube video series "Let's make a Rogue game ..."
50 ;With inspiration from David Arlington's "Atari Action" YouTube series as well.
60       .OPT OBJ
70       .INCLUDE #D2:EQUATES.M65
80       *=  $7000
90       JMP START
0100 TEMP1 .WORD 0
0110 TEMP2 .WORD 0
0120 RAMSET .WORD 0
0130 PMADR .WORD 0
0140 PMG_MSSL .WORD $00
0150 PMGP0 .WORD $00
0160 PMGP1 .WORD $00
0170 PMGP2 .WORD $00
0180 PMGP3 .WORD $00
0190 ;--------------------------------
0200 DRIVE .BYTE "D:"
0210 FILE .DS 13
0220 ;----------- FILES --------------
0230 TILES .BYTE "TILES.FNT",$9B
0240 MAPS .BYTE "MAPS.FNT",$9B
0250 TEST1 .BYTE "123456.FNT",$9B
0260 TEST2 .BYTE "12.FNT",$9B
0270 TEST3 .BYTE "12345678.FNT",$9B
0280 ;--------------------------------
0290     .INCLUDE #D2:MAPS.M65
0300 ;####### MACROS #######
0310     .MACRO MWA 
0320     LDA # <%1
0330     STA %2
0340     LDA # >%1
0350     STA %2+1
0360     .ENDM 
0370 ;
0380     .MACRO MVA 
0390     LDA %1,Y
0400     STA %2,Y
0410     .ENDM 
0420 ;
0430     .MACRO MVAI 
0440     LDA #%1
0450     STA %2
0460     .ENDM 
0470 ;
0480     .MACRO NEW_MEMTOP 
0490     SEC 
0500     LDA MEMTOP
0510     SBC # <%2
0520     AND # <%3
0530     STA MEMTOP
0540     STA %1
0550     LDA MEMTOP+1
0560     SBC # >%2
0570     AND # >%3
0580     STA MEMTOP+1
0590     STA %1+1
0600     .ENDM 
0610 ;
0620     .MACRO BLIT_ROW 
0630     LDX #0
0640     LDY #0
0650 BLIT_ROW_LOOP LDA %1,X
0660     ASL A
0670     STA %2,Y
0680     INY 
0690     CLC 
0700     ADC #1
0710     STA %2,Y
0720     INY 
0730     INX 
0740     CPX #20
0750     BNE BLIT_ROW_LOOP
0760     .ENDM 
0770 ;
0780     .MACRO PLDA  ;Load argument imediate(<256) or and address
0790       .IF [%1]>256
0800       LDA %1
0810       .ELSE 
0820       LDA #%1
0830       .ENDIF 
0840     .ENDM 
0850 ;
0860     .MACRO COLORSET  ; SETCOLOR register,color
0870     PHX 
0880      PLDA  %1
0890     TAX 
0900      PLDA  %2
0910     STA COLOR0,X
0920     PLX 
0930     .ENDM 
0940 ;
0950 ;##### END MACROS #####
0960 DLIST
0970     .BYTE BLANK8,BLANK8,BLANK8
0980     .BYTE ANTIC5+LMS,SCREEN&255,SCREEN/256
0990     .BYTE ANTIC5,ANTIC5,ANTIC5,ANTIC5,ANTIC5,ANTIC5
1000     .BYTE ANTIC5,ANTIC5,ANTIC5,ANTIC5,ANTIC5
1010     .BYTE JVB,DLIST&255,DLIST/256
1020 ;LOAD DISPLY LIST
1030 ;------------ Load Screen Graphics ------------
1040 LOAD_SCREEN_GRAPHICS
1050      BLIT_ROW  LEVEL1,SCREEN
1060      BLIT_ROW  LEVEL1+20,SCREEN+40
1070      BLIT_ROW  LEVEL1+40,SCREEN+80
1080      BLIT_ROW  LEVEL1+60,SCREEN+120
1090      BLIT_ROW  LEVEL1+80,SCREEN+160
1100      BLIT_ROW  LEVEL1+100,SCREEN+200
1110      BLIT_ROW  LEVEL1+120,SCREEN+240
1120      BLIT_ROW  LEVEL1+140,SCREEN+280
1130      BLIT_ROW  LEVEL1+160,SCREEN+320
1140      BLIT_ROW  LEVEL1+180,SCREEN+360
1150      BLIT_ROW  LEVEL1+200,SCREEN+400
1160      BLIT_ROW  LEVEL1+220,SCREEN+440
1170     RTS 
1180 ;------------ Set up Game Screen  -------------
1190 SET_UP_GAME_SCREEN
1200     LDA #0
1210     STA SDMCTL
1220      MWA  DLIST,SDLSTL
1230 ;Set Colors for character set
1240      COLORSET  0,GRAY_4
1250      COLORSET  1,GRAY_8
1260      COLORSET  2,BROWN_2
1270      COLORSET  3,GREEN_2
1280      COLORSET  4,BLACK
1290 ;Set up Character Set in memory
1300      NEW_MEMTOP  RAMSET,$0400,$FE00
1310     STA CHBAS
1320     JSR LOAD_TILE_SET
1330     LDA #$22
1340     STA SDMCTL
1350     RTS 
1360 ;
1370 INSERT_FILE:
1380     LDX #0
1390 IF_LOOP: LDA TILES,X ;WILL BE CHANGED TO 'LDA (FR0),X' IN FUTURE
1400     CMP #EOL
1410     BEQ PAD0
1420     STA FILE,X
1430     INX 
1440     CPX #12     ;max len. of file?
1450     BCC IF_LOOP ;No, next byte
1460 PAD0: LDA #0
1470     STA FILE,X
1480     RTS 
1490 ;
1500 LOAD_TILE_SET: ;  Load tile set
1510     JSR INSERT_FILE
1520 LOAD: LDX #$20  ;Close #2
1530     LDA #CLOSE
1540     STA ICCOM,X
1550     JSR CIOV
1560     LDA ICSTA,X
1570     BMI ERROR_FILE_LOAD
1580 ;
1590     LDX #$20    ;Open #2 for file
1600     LDA #OPEN
1610     STA ICCOM,X
1620     LDA # <DRIVE
1630     STA ICBAL,X
1640     LDA # >DRIVE
1650     STA ICBAH,X
1660     LDA #READ   ;Read only
1670     STA ICAX1,X
1680     LDA #0
1690     STA ICAX2,X
1700     JSR CIOV    ;Execute Open
1710     LDA ICSTA,X ;Error check
1720     BMI ERROR_FILE_LOAD
1730 ;
1740     LDX #$20    ;Read file to new
1750     LDA #GET    ;character set
1760     STA ICCOM,X ;location
1770     LDA RAMSET  ;Low byte-CHBAS
1780     STA ICBAL,X
1790     LDA RAMSET+1 ;High byte-CHBAS
1800     STA ICBAH,X
1810     LDA #$00    ;File length is
1820     STA ICBLL,X ;1024 bytes
1830     LDA #$04
1840     STA ICBLH,X
1850     JSR CIOV    ;Execute input
1860     LDA ICSTA,X ;Error check
1870     BMI ERROR_FILE_LOAD
1880 ;
1890     LDX #$20    ;Close #2
1900     LDA #CLOSE
1910     STA ICCOM,X
1920     JSR CIOV    ;Execute IOCB
1930     LDA ICSTA,X ;Error check
1940     BMI ERROR_FILE_LOAD
1950     RTS 
1960 ERROR_FILE_LOAD: BRK  ;CAUSE LOCK OU OF DDT NEEDS TO BE LOOKED INTO
1970 ;set up Player Missle Graphics
1980 SETUP_PMG
1990      MVAI  BROWN_2,PCOLR0 ;set PMG
2000      MVAI  PEACH,PCOLR1 ;colors
2010      MVAI  BLUE,PCOLR2
2020      MVAI  BLACK,PCOLR3
2030 ;
2040     LDA #120    ;place player in middle of hozontal screen
2050     STA HPOSP0
2060     STA HPOSP1
2070     STA HPOSP2
2080     STA HPOSP3
2090 ;
2100      NEW_MEMTOP  PMADR,$0400,$F800
2110     STA PMBASE
2120     CLC         ;add $0300 back
2130     LDA PMADR
2140     ADC #$80
2150     STA MEMTOP  ;update MEMTOP
2160     STA FR0
2170     STA FRE+2
2180     LDA PMADR+1
2190     ADC #$01
2200     STA FR0+1
2210     STA FRE+3
2220     STA MEMTOP+1
2230 ;
2240     LDX #2      ;calculate PMG address pointers m/p0/p1/p2/p3
2250 LOOPZ: CLC 
2260     LDA FRE+2
2270     ADC #$80
2280     STA FRE+2
2290     STA FR0,X
2300     INX 
2310     LDA FRE+3
2320     ADC #$00
2330     STA FRE+3
2340     STA FR0,X
2350     INX 
2360     CPX #$0A
2370     BNE LOOPZ
2380 ;
2390 CLEAR_PMG
2400     LDY #0      ;load PMG pointers into variable loctions
2410 TRANS_LOOP: LDA FR0,Y
2420     STA PMG_MSSL,Y
2430     INY 
2440     CPY #10
2450     BNE TRANS_LOOP
2460 ;
2470     LDY #0
2480     LDA #0
2490 ZERO_PMG_LOOP STA (FR0),Y
2500     STA (FR0+2),Y
2510     STA (FR0+4),Y
2520     STA (FRE),Y
2530     STA (FRE+2),Y
2540     INY 
2550     CPY #$80
2560     BNE ZERO_PMG_LOOP
2570     RTS 
2580 ;
2590 LOAD_PMG:
2600     LDX #0
2610 MATH_LOOP CLC 
2620     LDA PMGP0,X
2630     ADC #64
2640     STA FR0+2,X
2650     INX 
2660     LDA PMGP0,X
2670     ADC #0
2680     STA FR0+2,X
2690     INX 
2700     CPX #10
2710     BNE MATH_LOOP
2720 ;
2730     LDY #0
2740 PMG_LOAD_LOOP LDA PMGDATA,Y
2750     STA (FR0+2),Y
2760     LDA PMGDATA+8,Y
2770     STA (FR0+4),Y
2780     LDA PMGDATA+16,Y
2790     STA (FR0+6),Y
2800     LDA PMGDATA+24,Y
2810     STA (FR0+8),Y
2820     INY 
2830     CPY #8
2840     BNE PMG_LOAD_LOOP
2850 ;
2860     LDA #46
2870     STA SDMCTL
2880     LDA #3
2890     STA GRACTL
2900     LDA #1
2910     STA GRPRIOR
2920     RTS 
2930 ;----------------------------------------------
2940 START
2950     JSR SET_UP_GAME_SCREEN
2960     JSR LOAD_SCREEN_GRAPHICS
2970     JSR SETUP_PMG
2980     JSR LOAD_PMG
2990 ;
3000     LDA #$FF
3010     STA $02FC
3020 ;******************* Main Program Loop *******************
3030 ;
3040 MAIN_LOOP
3050     LDA $02FC
3060     CMP #$FF
3070     BNE QUIT
3080     JMP MAIN_LOOP
3090 ;
3100 ERROR BRK 
3110 QUIT BRK 
3120     .END 
